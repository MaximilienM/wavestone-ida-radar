{"changed":true,"filter":false,"title":"factory.js","tooltip":"/src/util/factory.js","value":"const d3 = require('d3');\nconst Tabletop = require('tabletop');\nconst _ = {\n    map: require('lodash/map'),\n    uniqBy: require('lodash/uniqBy'),\n    capitalize: require('lodash/capitalize'),\n    each: require('lodash/each')\n};\n\nconst InputSanitizer = require('./inputSanitizer');\nconst Radar = require('../models/radar');\nconst Quadrant = require('../models/quadrant');\nconst Ring = require('../models/ring');\nconst Blip = require('../models/blip');\nconst GraphingRadar = require('../graphing/radar');\nconst MalformedDataError = require('../exceptions/malformedDataError');\nconst SheetNotFoundError = require('../exceptions/sheetNotFoundError');\nconst ContentValidator = require('./contentValidator');\nconst Sheet = require('./sheet');\nconst TrelloHelper = require('./trelloHelper');\nconst ExceptionMessages = require('./exceptionMessages');\n\n\nconst TrelloBoard = function () {\n    \n    var self = {};\n   \n    self.build = function () {\n        console.log(\"TrelloBoard build\");\n        createRadarFromTrello();\n        \n        function displayErrorMessage(exception) {\n           // TBD\n        }\n        \n        function createRadarFromTrello() {\n            console.log(\"enteringcreateRadarFromTrello\");\n            try {\n                var columnNames = [\"name\", \"ring\", \"quadrant\", \"isNew\", \"description\"];\n                var contentValidator = new ContentValidator(columnNames);\n                contentValidator.verifyContent();\n                contentValidator.verifyHeaders();\n                \n                console.log(columnNames);\n\n                var trelloHelper = new TrelloHelper();\n\n                console.log(trelloHelper);\n\n                trelloHelper.build();\n                var all = [];\n                setTimeout(function(){\n                    all = trelloHelper.getAll();\n                    console.log(\"print all from factory \" +all);\n\n                    /*var all = [ { name: \"Charlie\", ring: \"adopt\", quadrant: \"Unicorn\", isNew: \"TRUE\", description: \"yolo\" }, \n                                { name: \"Chaaaa\", ring: \"adopt\", quadrant: \"Unicorn2\", isNew: \"TRUE\", description: \"yolo2\" }, \n                                { name: \"The non beliver\", ring: \"ringolo\", quadrant: \"Unicorn3\", isNew: \"TRUE\", description: \"yolo3\" }, \n                                { name: \"The Unicorn\", ring: \"ringTest\", quadrant: \"Magic Trees\", isNew: \"FALSE\", description: \"Adequate\" }\n                                ];\n                    */\n                    var blips = _.map(all, new InputSanitizer().sanitize);\n                    console.log(blips);\n    \n                    document.title = \"My Trello Board as Radar\";\n                    d3.selectAll(\".loading\").remove();\n    \n                    var rings = _.map(_.uniqBy(blips, 'ring'), 'ring');\n                    var ringMap = {};\n                    var maxRings = 4;\n    \n                    _.each(rings, function (ringName, i) {\n                        if (i == maxRings) {\n                            throw new MalformedDataError(ExceptionMessages.TOO_MANY_RINGS);\n                        }\n                        ringMap[ringName] = new Ring(ringName, i);\n                    });\n    \n                    var quadrants = {};\n                    _.each(blips, function (blip) {\n                        if (!quadrants[blip.quadrant]) {\n                            quadrants[blip.quadrant] = new Quadrant(_.capitalize(blip.quadrant));\n                        }\n                        quadrants[blip.quadrant].add(new Blip(blip.name, ringMap[blip.ring], blip.isNew.toLowerCase() === 'true', blip.topic, blip.description))\n                    });\n    \n                    var radar = new Radar();\n                    _.each(quadrants, function (quadrant) {\n                        radar.addQuadrant(quadrant)\n                    });\n    \n                    var size = (window.innerHeight - 133) < 620 ? 620 : window.innerHeight - 133;\n    \n                    new GraphingRadar(size, radar).init().plot();\n                }, 6000);\n                \n               \n\n            } catch (exception) {\n                displayErrorMessage(exception);\n            }\n        }\n    };\n\n    self.init = function () {\n        console.log(\"TrelloBoard init\");\n        var content = d3.select('body')\n            .append('div')\n            .attr('class', 'loading')\n            .append('div')\n            .attr('class', 'input-sheet');\n\n        set_document_title();\n\n        plotLogo(content);\n\n        var bannerText = '<h1>Building your radar...</h1><p>Your Technology Radar will be available in just a few seconds</p>';\n        plotBanner(content, bannerText);\n        plotFooter(content);\n        \n        return self;\n    };\n    \n    return self;\n};\n\n/*const GoogleSheet = function (sheetReference, sheetName) {\n    var self = {};\n   \n    self.build = function () {\n        var sheet = new Sheet(sheetReference);\n        sheet.exists(function(notFound) {\n            if (notFound) {\n                displayErrorMessage(notFound);\n                return;\n            }\n\n            Tabletop.init({\n                key: sheet.id,\n                callback: createRadarFromData\n            });\n        });\n\n        function displayErrorMessage(exception) {\n            d3.selectAll(\".loading\").remove();\n            var message = 'Oops! It seems like there are some problems with loading your data. ';\n\n            if (exception instanceof MalformedDataError) {\n                message = message.concat(exception.message);\n            } else if (exception instanceof SheetNotFoundError) {\n                message = exception.message;\n            } else {\n                console.error(exception);\n            }\n\n            message = message.concat('<br/>', 'Please check <a href=\"https://info.thoughtworks.com/visualize-your-tech-strategy-guide.html#faq\">FAQs</a> for possible solutions.');\n\n            d3.select('body')\n                .append('div')\n                .attr('class', 'error-container')\n                .append('div')\n                .attr('class', 'error-container__message')\n                .append('p')\n                .html(message);\n        }\n\n        function createRadar(sheets, tabletop) {\n            window.alert(\"function create radar\");\n\n            try {\n\n                if (!sheetName) {\n                    sheetName = Object.keys(sheets)[0];\n                }\n                var columnNames = tabletop.sheets(sheetName).column_names;\n\n                var contentValidator = new ContentValidator(columnNames);\n                contentValidator.verifyContent();\n                contentValidator.verifyHeaders();\n\n                var all = tabletop.sheets(sheetName).all();\n\n                var blips = _.map(all, new InputSanitizer().sanitize);\n\n                document.title = tabletop.googleSheetName;\n                d3.selectAll(\".loading\").remove();\n\n                var rings = _.map(_.uniqBy(blips, 'ring'), 'ring');\n                var ringMap = {};\n                var maxRings = 4;\n\n                _.each(rings, function (ringName, i) {\n                    if (i == maxRings) {\n                        throw new MalformedDataError(ExceptionMessages.TOO_MANY_RINGS);\n                    }\n                    ringMap[ringName] = new Ring(ringName, i);\n                });\n\n                var quadrants = {};\n                _.each(blips, function (blip) {\n                    if (!quadrants[blip.quadrant]) {\n                        quadrants[blip.quadrant] = new Quadrant(_.capitalize(blip.quadrant));\n                    }\n                    quadrants[blip.quadrant].add(new Blip(blip.name, ringMap[blip.ring], blip.isNew.toLowerCase() === 'true', blip.topic, blip.description))\n                });\n\n                var radar = new Radar();\n                _.each(quadrants, function (quadrant) {\n                    radar.addQuadrant(quadrant)\n                });\n\n                var size = (window.innerHeight - 133) < 620 ? 620 : window.innerHeight - 133;\n\n                new GraphingRadar(size, radar).init().plot();\n\n            } catch (exception) {\n                displayErrorMessage(exception);\n            }\n        }\n        \n        \n        function createRadarFromData() {\n\n            try {\n\n                var columnNames = [\"name\", \"ring\", \"quadrant\", \"isNew\", \"description\"];\n                \n                var contentValidator = new ContentValidator(columnNames);\n                contentValidator.verifyContent();\n                contentValidator.verifyHeaders();\n\n                var all = [ { name: \"Charlie\", ring: \"adopt\", quadrant: \"Unicorn\", isNew: \"TRUE\", description: \"yolo\" }, \n                            { name: \"Chaaaa\", ring: \"adopt\", quadrant: \"Unicorn2\", isNew: \"TRUE\", description: \"yolo2\" }, \n                            { name: \"The non beliver\", ring: \"ringolo\", quadrant: \"Unicorn3\", isNew: \"TRUE\", description: \"yolo3\" }, \n                            { name: \"The Unicorn\", ring: \"ringTest\", quadrant: \"Magic Trees\", isNew: \"FALSE\", description: \"Adequate\" }\n                            ];\n\n                var blips = _.map(all, new InputSanitizer().sanitize);\n\n                document.title = \"My Title\";\n                d3.selectAll(\".loading\").remove();\n\n                var rings = _.map(_.uniqBy(blips, 'ring'), 'ring');\n                var ringMap = {};\n                var maxRings = 4;\n\n                _.each(rings, function (ringName, i) {\n                    if (i == maxRings) {\n                        throw new MalformedDataError(ExceptionMessages.TOO_MANY_RINGS);\n                    }\n                    ringMap[ringName] = new Ring(ringName, i);\n                });\n\n                var quadrants = {};\n                _.each(blips, function (blip) {\n                    if (!quadrants[blip.quadrant]) {\n                        quadrants[blip.quadrant] = new Quadrant(_.capitalize(blip.quadrant));\n                    }\n                    quadrants[blip.quadrant].add(new Blip(blip.name, ringMap[blip.ring], blip.isNew.toLowerCase() === 'true', blip.topic, blip.description))\n                });\n\n                var radar = new Radar();\n                _.each(quadrants, function (quadrant) {\n                    radar.addQuadrant(quadrant)\n                });\n\n                var size = (window.innerHeight - 133) < 620 ? 620 : window.innerHeight - 133;\n\n                new GraphingRadar(size, radar).init().plot();\n\n            } catch (exception) {\n                displayErrorMessage(exception);\n            }\n            \n            \n        }\n    };\n\n    self.init = function () {\n        var content = d3.select('body')\n            .append('div')\n            .attr('class', 'loading')\n            .append('div')\n            .attr('class', 'input-sheet');\n\n        set_document_title();\n\n        plotLogo(content);\n\n        var bannerText = '<h1>Building your radar...</h1><p>Your Technology Radar will be available in just a few seconds</p>';\n        plotBanner(content, bannerText);\n        plotFooter(content);\n\n\n        return self;\n    };\n\n    return self;\n};*/\n\nvar QueryParams = function (queryString) {\n    //console.log(\"queryParams\");\n    var decode = function (s) {\n        return decodeURIComponent(s.replace(/\\+/g, \" \"));\n    };\n\n    var search = /([^&=]+)=?([^&]*)/g;\n\n    var queryParams = {};\n    var match;\n    while (match = search.exec(queryString))\n        queryParams[decode(match[1])] = decode(match[2]);\n\n    return queryParams\n};\n\n\n// ADDED TRELLO INPUT\nconst TrelloInput = function () {\n    console.log(\"enteringTrelloInput\");\n    var self = {};\n\n    self.build = function () {\n        //var queryParams = QueryParams(window.location.search.substring(1));\n\n        //if (queryParams.sheetId) {\n            //\n           // var dataTrello = TrelloBoard(queryParams.sheetId);\n           console.log(\"enteringTrelloInput   build\");\n           var dataTrello = TrelloBoard();\n           console.log(\"enteringTrelloInput   build dataTrello: \" +dataTrello);\n           dataTrello.init().build();\n        /*} else {\n            var content = d3.select('body')\n                .append('div')\n                .attr('class', 'input-sheet');\n\n            set_document_title();\n\n            plotLogo(content);\n\n            var bannerText = '<h1>Build your own Charlie Trello radar</h1>';\n\n            plotBanner(content, bannerText);\n\n            plotForm(content);\n\n            plotFooter(content);\n            \n            */\n\n        \n    };\n\n    return self;\n};\n\n/*const GoogleSheetInput = function () {\n    var self = {};\n\n    self.build = function () {\n        var queryParams = QueryParams(window.location.search.substring(1));\n        window.alert(\" query  \" + queryParams.sheetId + \"   -   \" + queryParams.sheetName);\n\n        if (queryParams.sheetId) {\n            var sheet = GoogleSheet(queryParams.sheetId, queryParams.sheetName);\n            sheet.init().build();\n        } else {\n            var content = d3.select('body')\n                .append('div')\n                .attr('class', 'input-sheet');\n\n            set_document_title();\n\n            plotLogo(content);\n\n            var bannerText = '<h1>Build your own Charlie  radar</h1><p>Once BannerTEXT you\\'ve <a href =\"https://info.thoughtworks.com/visualize-your-tech-strategy.html\">created your Radar</a>, you can use this service' +\n                ' to generate an <br />interactive version of your Technology Radar. Not sure how? <a href =\"https://info.thoughtworks.com/visualize-your-tech-strategy-guide.html\">Read this first.</a></p>';\n\n            plotBanner(content, bannerText);\n\n            plotForm(content);\n\n            plotFooter(content);\n\n        }\n    };\n\n    return self;\n};*/\n\n\n// Added Charlie\nfunction set_document_title() {\n    document.title = \"Build your own Charlie Radar\";\n}\n\nfunction plotLogo(content) {\n    content.append('div')\n        .attr('class', 'input-sheet__logo')\n        .html('<a href=\"https://www.thoughtworks.com\"><img src=\"/images/tw-logo.png\" / ></a>');\n}\n\nfunction plotFooter(content) {\n    content\n        .append('div')\n        .attr('id', 'footer')\n        .append('div')\n        .attr('class', 'footer-content')\n        .append('p')\n        .html('Powered by <a href=\"https://www.thoughtworks.com\"> ThoughtWorks</a>. '\n        + 'By using this service you agree to <a href=\"https://info.thoughtworks.com/visualize-your-tech-strategy-terms-of-service.html\">ThoughtWorks\\' terms of use</a>. '\n        + 'You also agree to our <a href=\"https://www.thoughtworks.com/privacy-policy\">privacy policy</a>, which describes how we will gather, use and protect any personal data contained in your public Google Sheet. '\n        + 'This software is <a href=\"https://github.com/thoughtworks/build-your-own-radar\">open source</a> and available for download and self-hosting.');\n\n\n\n}\n\nfunction plotBanner(content, text) {\n    content.append('div')\n        .attr('class', 'input-sheet__banner')\n        .html(text);\n\n}\n\nfunction plotForm(content) {\n    content.append('div')\n        .attr('class', 'input-sheet__form')\n        .append('p')\n        .html('<strong>Enter the URL of your <a href=\"https://support.google.com/docs/answer/37579\" target=\"_blank\">published</a> Google Sheet below…</strong>');\n\n    var form = content.select('.input-sheet__form').append('form')\n        .attr('method', 'get');\n\n    form.append('input')\n        .attr('type', 'text')\n        .attr('name', 'sheetId')\n        .attr('placeholder', 'e.g. https://docs.google.com/spreadsheets/d/1--_uLSNf/pubhtml');\n\n    form.append('button')\n        .attr('type', 'submit')\n        .append('a')\n        .attr('class', 'button')\n        .text('Build my radar');\n\n    form.append('p').html(\"<a href='https://info.thoughtworks.com/visualize-your-tech-strategy-guide.html#faq'>Need help?</a>\");\n}\n\nmodule.exports = TrelloInput;\n","undoManager":{"mark":-2,"position":1,"stack":[[{"start":{"row":44,"column":0},"end":{"row":45,"column":64},"action":"remove","lines":["                ","                //var trelloHelper = new TrelloHelper().build();"],"id":1846}],[{"start":{"row":48,"column":0},"end":{"row":48,"column":41},"action":"remove","lines":["                //trelloHelper.compute();"],"id":1847}]]},"ace":{"folds":[],"scrolltop":248.66666666666697,"scrollleft":0,"selection":{"start":{"row":35,"column":8},"end":{"row":35,"column":38},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":true,"wrapToView":true},"firstLineState":{"row":54,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1481108312869}